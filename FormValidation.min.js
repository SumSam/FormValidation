(function(n){"use strict-di";n.module("FormValidations.Config",[]).constant("FormValidationsConfig",{basePath:"",displayOption:"summary"});n.module("FormValidations",["template/validation/validation-summary-messages.html","template/validation/validation-item-messages.html","ngMessages","FormValidations.Config"]).factory("ReadJson",["$http",function(n){return{get:function(t){return t.indexOf(".json")>-1||(t+=".json"),n.get(t)}}}]).directive("validateForm",["ReadJson","$rootScope","FormValidationsConfig",function(t,i,r){var e=function(t,i,r){if(i[0].tagName!="FORM")throw"validate-Form must be set only on a form element";if(!n.isDefined(r.name))throw"validate-Form must be set on an form element that has a 'name' attribute";if(r.name=="")throw"validate-Form must be set on an form element that has a 'name' attribute set to a non blank value";if(n.isDefined(r.formVisibilityMap)&&!n.isArray(t.formVisibilityMap))throw"Value supplied to form-visibility-map should be of type 'array'";if(!n.isDefined(r.resourcePath)||t.resourcePath==="")throw"resource-Path should also be set alongside validate-form attribute to a non blank value";if(n.isDefined(r.displayOption)&&!(n.lowercase(t.displayOption)==="item"||n.lowercase(t.displayOption)==="summary"))throw"Invalid value for attribute 'display-Option'. Valid values are either 'Summary' or 'Item'";if(n.isDefined(r.messageVisibilityMap)&&!n.isArray(t.messageVisibilityMap))throw"Value supplied to message-visibility-map should be of type 'array'";},u=function(t,i,r){var u={type:"",msg:""},f;return u.type=t.trim(),f=i.data[r+"_"+u.type],u.msg=n.isDefined(f)?f:"##### KEY NOT FOUND #####",u},f=function(t,i,r,f,e){var s={name:"",validations:[]},c=i[0][e].name,o,h;if(n.isObject(t)&&n.isObject(t[c])&&n.isObject(t[c].$validators)&&(o=Object.getOwnPropertyNames(t[c].$validators),o.length>0))if(s.name=c,o.length>1){for(h=0;h<o.length;h++)o[h]!=""&&s.validations.push(u(o[h],f,s.name));r.push(s)}else o[0]!=""&&(s.validations.push(u(o[0],f,s.name)),r.push(s))},o=function(n,t,i){this.GetParentFormParams=function(){return{formObject:n.$parent[i.name],element:t,attrs:i}};this.SetValidationList=function(n,t,i,r,u){f(n,t,i,r,u)}},s=function(u,o,s,h){var c,l,a;e(h,o,s);c=h.resourcePath;r.basePath!==""&&(c="/"+r.basePath+"/"+c);l=[];n.isDefined(s.formVisibilityMap)||(h.formVisibilityMap=[{name:s.name,visible:!0}]);n.isDefined(s.displayOption)||(h.displayOption=n.lowercase(r.displayOption)==="summary"||n.lowercase(r.displayOption)==="item"?r.displayOption:"summary");n.isDefined(s.resourcePath)&&n.lowercase(h.displayOption)==="summary"&&t.get(c).then(function(n){for(var t=0;t<o[0].length;t++)f(u.$parent[s.name],o,l,n,t);i.$emit("validateForm:ValListReady",{validationList:l,formObject:u.$parent[s.name],formName:s.name})},function(){});a=i.$on("validateForm:SetFocus",function(n,t,i){if(s.name===i)for(var r=0;r<o[0].length;r++)if(o[0][r].name===t){o[0][r].focus();break}});u.$watch(function(){return h.formVisibilityMap},function(n){n&&h.formVisibilityMap[0].name===s.name&&i.$emit("validateForm:SetFormVisibilityMap",h.formVisibilityMap)},!0);u.$on("$destroy",function(){a()})};return{restrict:"A",bindToController:!0,scope:{formVisibilityMap:"=?",disableAllIfAttr:"=?",resourcePath:"@",displayOption:"@?"},link:s,controller:["$scope","$element","$attrs",o],controllerAs:"vm"}}]).directive("renderValidationMessages",["$rootScope",function(t){var i=function(i){this.multiValidationList=[];var r=t.$on("validateForm:ValListReady",n.bind(this,function(n,t){var i={formName:t.formName,validationList:t.validationList};this[t.formName]=t.formObject;this.multiValidationList.push(i)})),u=t.$on("validateForm:SetFormVisibilityMap",n.bind(this,function(t,i){n.forEach(i,n.bind(this,function(n){this[n.name+"_isVisible"]=n.visible}))}));this.setFocus=function(n,i){t.$emit("validateForm:SetFocus",n,i)};i.$on("$destroy",function(){r();u()})};return{restrict:"EA",templateUrl:"template/validation/validation-summary-messages.html",controller:["$scope",i],controllerAs:"vm"}}]).directive("validationFor",["ReadJson","$rootScope","FormValidationsConfig",function(t,i,r){var u=function(i,u,f,e){var s=e[0],o=e[1],c,h,v;if(s.validationFor==="")throw"Value provided to attribute validation-For should be a non-blank value";if(c=[],h=o.GetParentFormParams(),n.isDefined(o.resourcePath)&&n.lowercase(o.displayOption)==="item"){var l=h.element,y=h.attrs,a=o.resourcePath;r.basePath!==""&&(a="/"+r.basePath+"/"+a);v=[];t.get(a).then(function(n){for(var i,t=0;t<l[0].length;t++)if(l[0][t].name===s.validationFor){o.SetValidationList(h.formObject,l,v,n,t);i={formName:y.name,validationObj:v[0]};c.push(i);break}s[y.name]=h.formObject;s.ElementList=c},function(){});i.$watch(function(){return o.formVisibilityMap},function(t){t&&n.forEach(o.formVisibilityMap,function(n){s[n.name+"_isVisible"]=n.visible})},!0)}};return{restrict:"EA",templateUrl:"template/validation/validation-item-messages.html",bindToController:!0,scope:{validationFor:"@"},require:["validationFor","^validateForm"],controller:function(){},link:u,controllerAs:"vm"}}]);n.module("template/validation/validation-summary-messages.html",[]).run(["$templateCache",function(n){n.put("template/validation/validation-summary-messages.html",'<div ng-repeat="formItem in vm.multiValidationList">\n    <div ng-repeat="element in formItem.validationList" ng-show="vm.{{formItem.formName}}_isVisible">\n       <div ng-messages="vm[formItem.formName][element.name].$error" ng-show="vm[formItem.formName].$submitted || vm[formItem.formName][element.name].$dirty" ng-repeat="typeMsgPair in element.validations">\n          <div ng-message-exp ="typeMsgPair.type"><span style = "cursor: pointer;" ng-click="vm.setFocus(element.name,formItem.formName)">{{typeMsgPair.msg}}<\/span><\/div>\n       <\/div>\n    <\/div>\n <\/div>\n')}]);n.module("template/validation/validation-item-messages.html",[]).run(["$templateCache",function(n){n.put("template/validation/validation-item-messages.html",'<div ng-repeat="element in vm.ElementList" ng-show="vm.{{element.formName}}_isVisible">\n<div ng-messages="vm[element.formName][element.validationObj.name].$error" ng-show="vm[element.formName].$submitted || vm[element.formName][element.validationObj.name].$dirty" ng-repeat="typeMsgPair in element.validationObj.validations">\n  <div ng-message-exp ="typeMsgPair.type">{{typeMsgPair.msg}}<\/div>\n<\/div>\n')}])})(window.angular,window,document);
/*
//# sourceMappingURL=FormValidation.min.js.map
*/